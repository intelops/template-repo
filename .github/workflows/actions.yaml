name: Docker CI

on:
  pull_request:
    types:
      - opened
      - synchronize
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: alpine
  IMAGE_TAGS: ${{ github.sha }}
  DOCKERFILE: Dockerfile
  DOCKER_CONTEXT: .
  IMAGE_REGISTRY: ghcr.io
  REGISTRY_USER: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  DEBUG: false

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Build
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.DOCKER_CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          platforms: linux/amd64
          load: true
          push: false
          tags: |
            ${{ env.IMAGE_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAGS }}
            ${{ env.IMAGE_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest

      - name: check Image
        id: check_image
        run: docker image ls 
        if: ${{ env.DEBUG == 'true' }}

      - name: Run Trivy vulnerability scanner
        id: scan_image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAGS }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push Image
        id: push_image
        run: |
          docker push ${{ env.IMAGE_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAGS }}
          docker push ${{ env.IMAGE_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest